//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXDrawerLayout\src\main\java\androidx\drawerlayout\widget\DrawerLayout.java
//

#define J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION 1




#include "AccessibilityEvent.h"
#include "Context.h"
#include "DisplayMetrics.h"
#include "DrawerLayout.h"
#include "Gravity.h"
#include "GravityCompat.h"
#include "Insets.h"
#include "J2ObjC_source.h"
#include "Resources.h"
#include "View.h"
#include "ViewCompat.h"
#include "ViewGroup.h"
#include "java/lang/Boolean.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"


@class NSString;


#pragma clang diagnostic error "-Wreturn-type"
#pragma clang diagnostic ignored "-Wswitch"


@interface ADXDrawerLayout () {
 @public
  float mDrawerElevation_;
  int32_t mMinDrawerMargin_;
  int32_t mScrimColor_;
  float mScrimOpacity_;
  ADXDrawerLayout_ViewDragHelper *mLeftDragger_;
  ADXDrawerLayout_ViewDragHelper *mRightDragger_;
  int32_t mDrawerState_;
  bool mInLayout_;
  bool mFirstLayout_;
  int32_t mLockModeLeft_;
  int32_t mLockModeRight_;
  int32_t mLockModeStart_;
  int32_t mLockModeEnd_;
  bool mChildrenCanceledTouch_;
  id<ADXDrawerLayout_DrawerListener> mListener_;
  id<JavaUtilList> mListeners_;
  float mInitialMotionX_;
  float mInitialMotionY_;
  ADXDrawerLayout_WindowInsetsCompat *mLastInsets_;
  bool mDrawStatusBarBackground_;
}

- (void)updateChildAccessibilityActionWithADView:(ADView *)drawerView;

- (void)updateChildrenImportantForAccessibilityWithADView:(ADView *)drawerView
                                              withBoolean:(bool)b;

@end

J2OBJC_FIELD_SETTER(ADXDrawerLayout, mLeftDragger_, ADXDrawerLayout_ViewDragHelper *)
J2OBJC_FIELD_SETTER(ADXDrawerLayout, mRightDragger_, ADXDrawerLayout_ViewDragHelper *)
J2OBJC_FIELD_SETTER(ADXDrawerLayout, mListener_, id<ADXDrawerLayout_DrawerListener>)
J2OBJC_FIELD_SETTER(ADXDrawerLayout, mListeners_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ADXDrawerLayout, mLastInsets_, ADXDrawerLayout_WindowInsetsCompat *)

inline NSString *ADXDrawerLayout_get_TAG(void);
static NSString *ADXDrawerLayout_TAG = @"DrawerLayout";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXDrawerLayout, TAG, NSString *)

inline int32_t ADXDrawerLayout_get_MIN_DRAWER_MARGIN(void);
#define ADXDrawerLayout_MIN_DRAWER_MARGIN 64
J2OBJC_STATIC_FIELD_CONSTANT(ADXDrawerLayout, MIN_DRAWER_MARGIN, int32_t)

inline int32_t ADXDrawerLayout_get_DEFAULT_SCRIM_COLOR(void);
#define ADXDrawerLayout_DEFAULT_SCRIM_COLOR -1728053248
J2OBJC_STATIC_FIELD_CONSTANT(ADXDrawerLayout, DEFAULT_SCRIM_COLOR, int32_t)

inline int32_t ADXDrawerLayout_get_PEEK_DELAY(void);
#define ADXDrawerLayout_PEEK_DELAY 160
J2OBJC_STATIC_FIELD_CONSTANT(ADXDrawerLayout, PEEK_DELAY, int32_t)

inline int32_t ADXDrawerLayout_get_MIN_FLING_VELOCITY(void);
#define ADXDrawerLayout_MIN_FLING_VELOCITY 400
J2OBJC_STATIC_FIELD_CONSTANT(ADXDrawerLayout, MIN_FLING_VELOCITY, int32_t)

inline bool ADXDrawerLayout_get_ALLOW_EDGE_LOCK(void);
#define ADXDrawerLayout_ALLOW_EDGE_LOCK false
J2OBJC_STATIC_FIELD_CONSTANT(ADXDrawerLayout, ALLOW_EDGE_LOCK, bool)

inline bool ADXDrawerLayout_get_CHILDREN_DISALLOW_INTERCEPT(void);
#define ADXDrawerLayout_CHILDREN_DISALLOW_INTERCEPT true
J2OBJC_STATIC_FIELD_CONSTANT(ADXDrawerLayout, CHILDREN_DISALLOW_INTERCEPT, bool)

inline float ADXDrawerLayout_get_TOUCH_SLOP_SENSITIVITY(void);
#define ADXDrawerLayout_TOUCH_SLOP_SENSITIVITY 1.0f
J2OBJC_STATIC_FIELD_CONSTANT(ADXDrawerLayout, TOUCH_SLOP_SENSITIVITY, float)

inline bool ADXDrawerLayout_get_SET_DRAWER_SHADOW_FROM_ELEVATION(void);
#define ADXDrawerLayout_SET_DRAWER_SHADOW_FROM_ELEVATION true
J2OBJC_STATIC_FIELD_CONSTANT(ADXDrawerLayout, SET_DRAWER_SHADOW_FROM_ELEVATION, bool)

inline bool ADXDrawerLayout_get_sEdgeSizeUsingSystemGestureInsets(void);
#define ADXDrawerLayout_sEdgeSizeUsingSystemGestureInsets false
J2OBJC_STATIC_FIELD_CONSTANT(ADXDrawerLayout, sEdgeSizeUsingSystemGestureInsets, bool)

__attribute__((unused)) static void ADXDrawerLayout_updateChildAccessibilityActionWithADView_(ADXDrawerLayout *self, ADView *drawerView);

__attribute__((unused)) static void ADXDrawerLayout_updateChildrenImportantForAccessibilityWithADView_withBoolean_(ADXDrawerLayout *self, ADView *drawerView, bool b);

@interface ADXDrawerLayout_DrawerListener : NSObject

@end

inline int32_t ADXDrawerLayout_LayoutParams_get_FLAG_IS_OPENED(void);
#define ADXDrawerLayout_LayoutParams_FLAG_IS_OPENED 1
J2OBJC_STATIC_FIELD_CONSTANT(ADXDrawerLayout_LayoutParams, FLAG_IS_OPENED, int32_t)

inline int32_t ADXDrawerLayout_LayoutParams_get_FLAG_IS_OPENING(void);
#define ADXDrawerLayout_LayoutParams_FLAG_IS_OPENING 2
J2OBJC_STATIC_FIELD_CONSTANT(ADXDrawerLayout_LayoutParams, FLAG_IS_OPENING, int32_t)

inline int32_t ADXDrawerLayout_LayoutParams_get_FLAG_IS_CLOSING(void);
#define ADXDrawerLayout_LayoutParams_FLAG_IS_CLOSING 4
J2OBJC_STATIC_FIELD_CONSTANT(ADXDrawerLayout_LayoutParams, FLAG_IS_CLOSING, int32_t)

@interface ADXDrawerLayout_ViewDragHelper () {
 @public
  ADXDrawerLayout *this$0_;
  int32_t mDragState_;
  int32_t mEdgeSize_;
  int32_t mDefaultEdgeSize_;
}

@end

inline int32_t ADXDrawerLayout_ViewDragHelper_get_EDGE_SIZE(void);
#define ADXDrawerLayout_ViewDragHelper_EDGE_SIZE 20
J2OBJC_STATIC_FIELD_CONSTANT(ADXDrawerLayout_ViewDragHelper, EDGE_SIZE, int32_t)

@implementation ADXDrawerLayout

- (void)setDrawerListenerWithADXDrawerLayout_DrawerListener:(id<ADXDrawerLayout_DrawerListener>)listener {
  if (mListener_ != nil) {
    [self removeDrawerListenerWithADXDrawerLayout_DrawerListener:mListener_];
  }
  if (listener != nil) {
    [self addDrawerListenerWithADXDrawerLayout_DrawerListener:listener];
  }
  JreStrongAssign(&mListener_, listener);
}

- (void)addDrawerListenerWithADXDrawerLayout_DrawerListener:(id<ADXDrawerLayout_DrawerListener>)listener {
  if (mListeners_ == nil) {
    JreStrongAssignAndConsume(&mListeners_, new_JavaUtilArrayList_init());
  }
  [mListeners_ addWithId:listener];
}

- (void)removeDrawerListenerWithADXDrawerLayout_DrawerListener:(id<ADXDrawerLayout_DrawerListener>)listener {
  if (mListeners_ == nil) {
    return;
  }
  [mListeners_ removeWithId:listener];
}

- (void)setDrawerLockModeWithInt:(int32_t)lockMode {
  [self setDrawerLockModeWithInt:lockMode withInt:ADGravity_LEFT];
  [self setDrawerLockModeWithInt:lockMode withInt:ADGravity_RIGHT];
}

- (void)setDrawerLockModeWithInt:(int32_t)lockMode
                         withInt:(int32_t)edgeGravity {
  int32_t absGravity = ADXGravityCompat_getAbsoluteGravityWithInt_withInt_(edgeGravity, ADXViewCompat_getLayoutDirectionWithADView_(self));
  switch (edgeGravity) {
    case ADGravity_LEFT:
    mLockModeLeft_ = lockMode;
    break;
    case ADGravity_RIGHT:
    mLockModeRight_ = lockMode;
    break;
    case ADXGravityCompat_START:
    mLockModeStart_ = lockMode;
    break;
    case ADXGravityCompat_END:
    mLockModeEnd_ = lockMode;
    break;
  }
  if (lockMode != ADXDrawerLayout_LOCK_MODE_UNLOCKED) {
    ADXDrawerLayout_ViewDragHelper *helper = absGravity == ADGravity_LEFT ? mLeftDragger_ : mRightDragger_;
    [helper cancel];
  }
  {
    ADView *toOpen;
    ADView *toClose;
    switch (lockMode) {
      case ADXDrawerLayout_LOCK_MODE_LOCKED_OPEN:
      toOpen = [self findDrawerWithGravityWithInt:absGravity];
      if (toOpen != nil) {
        [self openDrawerWithADView:toOpen];
      }
      break;
      case ADXDrawerLayout_LOCK_MODE_LOCKED_CLOSED:
      toClose = [self findDrawerWithGravityWithInt:absGravity];
      if (toClose != nil) {
        [self closeDrawerWithADView:toClose];
      }
      break;
    }
  }
}

- (void)setDrawerLockModeWithInt:(int32_t)lockMode
                      withADView:(ADView *)drawerView {
  if (![self isDrawerViewWithADView:drawerView]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@$", @"View ", drawerView, @" is not a drawer with appropriate layout_gravity"));
  }
  int32_t gravity = ((ADXDrawerLayout_LayoutParams *) nil_chk(((ADXDrawerLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(drawerView)) getLayoutParams], [ADXDrawerLayout_LayoutParams class]))))->gravity_;
  [self setDrawerLockModeWithInt:lockMode withInt:gravity];
}

- (int32_t)getDrawerLockModeWithInt:(int32_t)edgeGravity {
  int32_t layoutDirection = ADXViewCompat_getLayoutDirectionWithADView_(self);
  {
    int32_t leftLockMode;
    int32_t rightLockMode;
    int32_t startLockMode;
    int32_t endLockMode;
    switch (edgeGravity) {
      case ADGravity_LEFT:
      if (mLockModeLeft_ != ADXDrawerLayout_LOCK_MODE_UNDEFINED) {
        return mLockModeLeft_;
      }
      leftLockMode = (layoutDirection == ADXViewCompat_LAYOUT_DIRECTION_LTR) ? mLockModeStart_ : mLockModeEnd_;
      if (leftLockMode != ADXDrawerLayout_LOCK_MODE_UNDEFINED) {
        return leftLockMode;
      }
      break;
      case ADGravity_RIGHT:
      if (mLockModeRight_ != ADXDrawerLayout_LOCK_MODE_UNDEFINED) {
        return mLockModeRight_;
      }
      rightLockMode = (layoutDirection == ADXViewCompat_LAYOUT_DIRECTION_LTR) ? mLockModeEnd_ : mLockModeStart_;
      if (rightLockMode != ADXDrawerLayout_LOCK_MODE_UNDEFINED) {
        return rightLockMode;
      }
      break;
      case ADXGravityCompat_START:
      if (mLockModeStart_ != ADXDrawerLayout_LOCK_MODE_UNDEFINED) {
        return mLockModeStart_;
      }
      startLockMode = (layoutDirection == ADXViewCompat_LAYOUT_DIRECTION_LTR) ? mLockModeLeft_ : mLockModeRight_;
      if (startLockMode != ADXDrawerLayout_LOCK_MODE_UNDEFINED) {
        return startLockMode;
      }
      break;
      case ADXGravityCompat_END:
      if (mLockModeEnd_ != ADXDrawerLayout_LOCK_MODE_UNDEFINED) {
        return mLockModeEnd_;
      }
      endLockMode = (layoutDirection == ADXViewCompat_LAYOUT_DIRECTION_LTR) ? mLockModeRight_ : mLockModeLeft_;
      if (endLockMode != ADXDrawerLayout_LOCK_MODE_UNDEFINED) {
        return endLockMode;
      }
      break;
    }
  }
  return ADXDrawerLayout_LOCK_MODE_UNLOCKED;
}

- (int32_t)getDrawerLockModeWithADView:(ADView *)drawerView {
  if (![self isDrawerViewWithADView:drawerView]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@$", @"View ", drawerView, @" is not a drawer"));
  }
  int32_t drawerGravity = ((ADXDrawerLayout_LayoutParams *) nil_chk(((ADXDrawerLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(drawerView)) getLayoutParams], [ADXDrawerLayout_LayoutParams class]))))->gravity_;
  return [self getDrawerLockModeWithInt:drawerGravity];
}

- (void)updateDrawerStateWithInt:(int32_t)activeState
                      withADView:(ADView *)activeDrawer {
  int32_t leftState = [((ADXDrawerLayout_ViewDragHelper *) nil_chk(mLeftDragger_)) getViewDragState];
  int32_t rightState = [((ADXDrawerLayout_ViewDragHelper *) nil_chk(mRightDragger_)) getViewDragState];
  int32_t state;
  if (leftState == ADXDrawerLayout_STATE_DRAGGING || rightState == ADXDrawerLayout_STATE_DRAGGING) {
    state = ADXDrawerLayout_STATE_DRAGGING;
  }
  else if (leftState == ADXDrawerLayout_STATE_SETTLING || rightState == ADXDrawerLayout_STATE_SETTLING) {
    state = ADXDrawerLayout_STATE_SETTLING;
  }
  else {
    state = ADXDrawerLayout_STATE_IDLE;
  }
  if (activeDrawer != nil && activeState == ADXDrawerLayout_STATE_IDLE) {
    ADXDrawerLayout_LayoutParams *lp = (ADXDrawerLayout_LayoutParams *) cast_chk([activeDrawer getLayoutParams], [ADXDrawerLayout_LayoutParams class]);
    if (((ADXDrawerLayout_LayoutParams *) nil_chk(lp))->onScreen_ == 0) {
      [self dispatchOnDrawerClosedWithADView:activeDrawer];
    }
    else if (lp->onScreen_ == 1) {
      [self dispatchOnDrawerOpenedWithADView:activeDrawer];
      [self setFlagStateOpenedWithADView:activeDrawer];
    }
  }
  if (state != mDrawerState_) {
    mDrawerState_ = state;
    if (mListeners_ != nil) {
      int32_t listenerCount = [mListeners_ size];
      for (int32_t i = listenerCount - 1; i >= 0; i--) {
        [((id<ADXDrawerLayout_DrawerListener>) nil_chk([((id<JavaUtilList>) nil_chk(mListeners_)) getWithInt:i])) onDrawerStateChangedWithInt:state];
      }
    }
  }
}

- (void)dispatchOnDrawerClosedWithADView:(ADView *)drawerView {
  ADXDrawerLayout_LayoutParams *lp = (ADXDrawerLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(drawerView)) getLayoutParams], [ADXDrawerLayout_LayoutParams class]);
  if ((((ADXDrawerLayout_LayoutParams *) nil_chk(lp))->openState_ & ADXDrawerLayout_LayoutParams_FLAG_IS_OPENED) == 1) {
    lp->openState_ = 0;
    if (mListeners_ != nil) {
      int32_t listenerCount = [mListeners_ size];
      for (int32_t i = listenerCount - 1; i >= 0; i--) {
        [((id<ADXDrawerLayout_DrawerListener>) nil_chk([((id<JavaUtilList>) nil_chk(mListeners_)) getWithInt:i])) onDrawerClosedWithADView:drawerView];
      }
    }
    ADXDrawerLayout_updateChildrenImportantForAccessibilityWithADView_withBoolean_(self, drawerView, false);
    ADXDrawerLayout_updateChildAccessibilityActionWithADView_(self, drawerView);
    if ([self hasWindowFocus]) {
      ADView *rootView = [self getRootView];
      if (rootView != nil) {
        [rootView sendAccessibilityEventWithInt:ADAccessibilityEvent_TYPE_WINDOW_STATE_CHANGED];
      }
    }
  }
}

- (void)dispatchOnDrawerOpenedWithADView:(ADView *)drawerView {
  ADXDrawerLayout_LayoutParams *lp = (ADXDrawerLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(drawerView)) getLayoutParams], [ADXDrawerLayout_LayoutParams class]);
  if ((((ADXDrawerLayout_LayoutParams *) nil_chk(lp))->openState_ & ADXDrawerLayout_LayoutParams_FLAG_IS_OPENED) == 0) {
    lp->openState_ = ADXDrawerLayout_LayoutParams_FLAG_IS_OPENED;
    if (mListeners_ != nil) {
      int32_t listenerCount = [mListeners_ size];
      for (int32_t i = listenerCount - 1; i >= 0; i--) {
        [((id<ADXDrawerLayout_DrawerListener>) nil_chk([((id<JavaUtilList>) nil_chk(mListeners_)) getWithInt:i])) onDrawerOpenedWithADView:drawerView];
      }
    }
    ADXDrawerLayout_updateChildrenImportantForAccessibilityWithADView_withBoolean_(self, drawerView, true);
    ADXDrawerLayout_updateChildAccessibilityActionWithADView_(self, drawerView);
    if ([self hasWindowFocus]) {
      [self sendAccessibilityEventWithInt:ADAccessibilityEvent_TYPE_WINDOW_STATE_CHANGED];
    }
  }
}

- (void)dispatchOnDrawerSlideWithADView:(ADView *)drawerView
                              withFloat:(float)slideOffset {
  if (mListeners_ != nil) {
    int32_t listenerCount = [mListeners_ size];
    for (int32_t i = listenerCount - 1; i >= 0; i--) {
      [((id<ADXDrawerLayout_DrawerListener>) nil_chk([((id<JavaUtilList>) nil_chk(mListeners_)) getWithInt:i])) onDrawerSlideWithADView:drawerView withFloat:slideOffset];
    }
  }
}

- (void)setDrawerViewOffsetWithADView:(ADView *)drawerView
                            withFloat:(float)slideOffset {
  ADXDrawerLayout_LayoutParams *lp = (ADXDrawerLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(drawerView)) getLayoutParams], [ADXDrawerLayout_LayoutParams class]);
  if (slideOffset == ((ADXDrawerLayout_LayoutParams *) nil_chk(lp))->onScreen_) {
    return;
  }
  lp->onScreen_ = slideOffset;
  [self dispatchOnDrawerSlideWithADView:drawerView withFloat:slideOffset];
}

- (float)getDrawerViewOffsetWithADView:(ADView *)drawerView {
  return ((ADXDrawerLayout_LayoutParams *) nil_chk(((ADXDrawerLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(drawerView)) getLayoutParams], [ADXDrawerLayout_LayoutParams class]))))->onScreen_;
}

- (int32_t)getDrawerViewAbsoluteGravityWithADView:(ADView *)drawerView {
  int32_t gravity = ((ADXDrawerLayout_LayoutParams *) nil_chk(((ADXDrawerLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(drawerView)) getLayoutParams], [ADXDrawerLayout_LayoutParams class]))))->gravity_;
  return ADXGravityCompat_getAbsoluteGravityWithInt_withInt_(gravity, ADXViewCompat_getLayoutDirectionWithADView_(self));
}

- (bool)checkDrawerViewAbsoluteGravityWithADView:(ADView *)drawerView
                                         withInt:(int32_t)checkFor {
  int32_t absGravity = [self getDrawerViewAbsoluteGravityWithADView:drawerView];
  return (absGravity & checkFor) == checkFor;
}

- (void)moveDrawerToOffsetWithADView:(ADView *)drawerView
                           withFloat:(float)slideOffset {
  float oldOffset = [self getDrawerViewOffsetWithADView:drawerView];
  int32_t width = [((ADView *) nil_chk(drawerView)) getWidth];
  int32_t oldPos = JreFpToInt((width * oldOffset));
  int32_t newPos = JreFpToInt((width * slideOffset));
  int32_t dx = newPos - oldPos;
  [drawerView offsetLeftAndRightWithInt:[self checkDrawerViewAbsoluteGravityWithADView:drawerView withInt:ADGravity_LEFT] ? dx : -dx];
  [self setDrawerViewOffsetWithADView:drawerView withFloat:slideOffset];
}

- (ADView *)findDrawerWithGravityWithInt:(int32_t)gravity {
  int32_t absHorizGravity = ADXGravityCompat_getAbsoluteGravityWithInt_withInt_(gravity, ADXViewCompat_getLayoutDirectionWithADView_(self)) & ADGravity_HORIZONTAL_GRAVITY_MASK;
  int32_t childCount = [self getChildCount];
  for (int32_t i = 0; i < childCount; i++) {
    ADView *child = [self getChildAtWithInt:i];
    int32_t childAbsGravity = [self getDrawerViewAbsoluteGravityWithADView:child];
    if ((childAbsGravity & ADGravity_HORIZONTAL_GRAVITY_MASK) == absHorizGravity) {
      return child;
    }
  }
  return nil;
}

+ (NSString *)gravityToStringWithInt:(int32_t)gravity {
  return ADXDrawerLayout_gravityToStringWithInt_(gravity);
}

- (void)onMeasureWithInt:(int32_t)widthMeasureSpec
                 withInt:(int32_t)heightMeasureSpec {
  int32_t widthMode = ADView_MeasureSpec_getModeWithInt_(widthMeasureSpec);
  int32_t heightMode = ADView_MeasureSpec_getModeWithInt_(heightMeasureSpec);
  int32_t widthSize = ADView_MeasureSpec_getSizeWithInt_(widthMeasureSpec);
  int32_t heightSize = ADView_MeasureSpec_getSizeWithInt_(heightMeasureSpec);
  if (widthMode != ADView_MeasureSpec_EXACTLY || heightMode != ADView_MeasureSpec_EXACTLY) {
    if ([self isInEditMode]) {
      if (widthMode == ADView_MeasureSpec_UNSPECIFIED) {
        widthSize = 300;
      }
      if (heightMode == ADView_MeasureSpec_UNSPECIFIED) {
        heightSize = 300;
      }
    }
    else {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"DrawerLayout must be measured with MeasureSpec.EXACTLY.");
    }
  }
  [self setMeasuredDimensionWithInt:widthSize withInt:heightSize];
  bool applyInsets = mLastInsets_ != nil && ADXViewCompat_getFitsSystemWindowsWithADView_(self);
  int32_t layoutDirection = ADXViewCompat_getLayoutDirectionWithADView_(self);
  bool hasDrawerOnLeftEdge = false;
  bool hasDrawerOnRightEdge = false;
  int32_t childCount = [self getChildCount];
  for (int32_t i = 0; i < childCount; i++) {
    ADView *child = [self getChildAtWithInt:i];
    if ([((ADView *) nil_chk(child)) getVisibility] == ADView_GONE) {
      continue;
    }
    ADXDrawerLayout_LayoutParams *lp = (ADXDrawerLayout_LayoutParams *) cast_chk([child getLayoutParams], [ADXDrawerLayout_LayoutParams class]);
    if (applyInsets) {
      int32_t cgrav = ADXGravityCompat_getAbsoluteGravityWithInt_withInt_(((ADXDrawerLayout_LayoutParams *) nil_chk(lp))->gravity_, layoutDirection);
      if (ADXViewCompat_getFitsSystemWindowsWithADView_(child)) {
        {
          ADXDrawerLayout_WindowInsetsCompat *wi = JreRetainedLocalValue(mLastInsets_);
          if (cgrav == ADGravity_LEFT) {
            wi = [((ADXDrawerLayout_WindowInsetsCompat *) nil_chk(wi)) replaceSystemWindowInsetsWithInt:[wi getSystemWindowInsetLeft] withInt:[wi getSystemWindowInsetTop] withInt:0 withInt:[wi getSystemWindowInsetBottom]];
          }
          else if (cgrav == ADGravity_RIGHT) {
            wi = [((ADXDrawerLayout_WindowInsetsCompat *) nil_chk(wi)) replaceSystemWindowInsetsWithInt:0 withInt:[wi getSystemWindowInsetTop] withInt:[wi getSystemWindowInsetRight] withInt:[wi getSystemWindowInsetBottom]];
          }
          ADXViewCompat_dispatchApplyWindowInsetsWithADView_withId_(child, wi);
        }
      }
      else {
        {
          ADXDrawerLayout_WindowInsetsCompat *wi = JreRetainedLocalValue(mLastInsets_);
          if (cgrav == ADGravity_LEFT) {
            wi = [((ADXDrawerLayout_WindowInsetsCompat *) nil_chk(wi)) replaceSystemWindowInsetsWithInt:[wi getSystemWindowInsetLeft] withInt:[wi getSystemWindowInsetTop] withInt:0 withInt:[wi getSystemWindowInsetBottom]];
          }
          else if (cgrav == ADGravity_RIGHT) {
            wi = [((ADXDrawerLayout_WindowInsetsCompat *) nil_chk(wi)) replaceSystemWindowInsetsWithInt:0 withInt:[wi getSystemWindowInsetTop] withInt:[wi getSystemWindowInsetRight] withInt:[wi getSystemWindowInsetBottom]];
          }
          lp->leftMargin_ = [((ADXDrawerLayout_WindowInsetsCompat *) nil_chk(wi)) getSystemWindowInsetLeft];
          lp->topMargin_ = [wi getSystemWindowInsetTop];
          lp->rightMargin_ = [wi getSystemWindowInsetRight];
          lp->bottomMargin_ = [wi getSystemWindowInsetBottom];
        }
      }
    }
    if ([self isContentViewWithADView:child]) {
      int32_t contentWidthSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(widthSize - ((ADXDrawerLayout_LayoutParams *) nil_chk(lp))->leftMargin_ - lp->rightMargin_, ADView_MeasureSpec_EXACTLY);
      int32_t contentHeightSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(heightSize - lp->topMargin_ - lp->bottomMargin_, ADView_MeasureSpec_EXACTLY);
      [child measureWithInt:contentWidthSpec withInt:contentHeightSpec];
    }
    else if ([self isDrawerViewWithADView:child]) {
      {
        if (ADXViewCompat_getElevationWithADView_(child) != mDrawerElevation_) {
          ADXViewCompat_setElevationWithADView_withFloat_(child, mDrawerElevation_);
        }
      }
      int32_t childGravity = [self getDrawerViewAbsoluteGravityWithADView:child] & ADGravity_HORIZONTAL_GRAVITY_MASK;
      bool isLeftEdgeDrawer = childGravity == ADGravity_LEFT;
      if ((isLeftEdgeDrawer && hasDrawerOnLeftEdge) || (!isLeftEdgeDrawer && hasDrawerOnRightEdge)) {
        @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$$$$", @"Child drawer has absolute gravity ", ADXDrawerLayout_gravityToStringWithInt_(childGravity), @" but this ", ADXDrawerLayout_TAG, @" already has a drawer view along that edge"));
      }
      if (isLeftEdgeDrawer) {
        hasDrawerOnLeftEdge = true;
      }
      else {
        hasDrawerOnRightEdge = true;
      }
      int32_t drawerWidthSpec = ADViewGroup_getChildMeasureSpecWithInt_withInt_withInt_(widthMeasureSpec, mMinDrawerMargin_ + ((ADXDrawerLayout_LayoutParams *) nil_chk(lp))->leftMargin_ + lp->rightMargin_, lp->width_);
      int32_t drawerHeightSpec = ADViewGroup_getChildMeasureSpecWithInt_withInt_withInt_(heightMeasureSpec, lp->topMargin_ + lp->bottomMargin_, lp->height_);
      [child measureWithInt:drawerWidthSpec withInt:drawerHeightSpec];
    }
    else {
      @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@$I$", @"Child ", child, @" at index ", i, @" does not have a valid layout_gravity - must be Gravity.LEFT, Gravity.RIGHT or Gravity.NO_GRAVITY"));
    }
  }
}

- (void)onLayoutWithBoolean:(bool)changed
                    withInt:(int32_t)l
                    withInt:(int32_t)t
                    withInt:(int32_t)r
                    withInt:(int32_t)b {
  mInLayout_ = true;
  int32_t width = r - l;
  int32_t childCount = [self getChildCount];
  for (int32_t i = 0; i < childCount; i++) {
    ADView *child = [self getChildAtWithInt:i];
    if ([((ADView *) nil_chk(child)) getVisibility] == ADView_GONE) {
      continue;
    }
    ADXDrawerLayout_LayoutParams *lp = (ADXDrawerLayout_LayoutParams *) cast_chk([child getLayoutParams], [ADXDrawerLayout_LayoutParams class]);
    if ([self isContentViewWithADView:child]) {
      [child layoutWithInt:((ADXDrawerLayout_LayoutParams *) nil_chk(lp))->leftMargin_ withInt:lp->topMargin_ withInt:lp->leftMargin_ + [child getMeasuredWidth] withInt:lp->topMargin_ + [child getMeasuredHeight]];
    }
    else {
      int32_t childWidth = [child getMeasuredWidth];
      int32_t childHeight = [child getMeasuredHeight];
      int32_t childLeft;
      float newOffset;
      if ([self checkDrawerViewAbsoluteGravityWithADView:child withInt:ADGravity_LEFT]) {
        childLeft = -childWidth + JreFpToInt((childWidth * ((ADXDrawerLayout_LayoutParams *) nil_chk(lp))->onScreen_));
        newOffset = (float) (childWidth + childLeft) / childWidth;
      }
      else {
        childLeft = width - JreFpToInt((childWidth * ((ADXDrawerLayout_LayoutParams *) nil_chk(lp))->onScreen_));
        newOffset = (float) (width - childLeft) / childWidth;
      }
      bool changeOffset = newOffset != lp->onScreen_;
      int32_t vgrav = lp->gravity_ & ADGravity_VERTICAL_GRAVITY_MASK;
      switch (vgrav) {
        default:
        case ADGravity_TOP:
        {
          [child layoutWithInt:childLeft withInt:lp->topMargin_ withInt:childLeft + childWidth withInt:lp->topMargin_ + childHeight];
          break;
        }
        case ADGravity_BOTTOM:
        {
          int32_t height = b - t;
          [child layoutWithInt:childLeft withInt:height - lp->bottomMargin_ - [child getMeasuredHeight] withInt:childLeft + childWidth withInt:height - lp->bottomMargin_];
          break;
        }
        case ADGravity_CENTER_VERTICAL:
        {
          int32_t height = b - t;
          int32_t childTop = JreIntDiv((height - childHeight), 2);
          if (childTop < lp->topMargin_) {
            childTop = lp->topMargin_;
          }
          else if (childTop + childHeight > height - lp->bottomMargin_) {
            childTop = height - lp->bottomMargin_ - childHeight;
          }
          [child layoutWithInt:childLeft withInt:childTop withInt:childLeft + childWidth withInt:childTop + childHeight];
          break;
        }
      }
      if (changeOffset) {
        [self setDrawerViewOffsetWithADView:child withFloat:newOffset];
      }
      int32_t newVisibility = lp->onScreen_ > 0 ? ADView_VISIBLE : ADView_INVISIBLE;
      if ([child getVisibility] != newVisibility) {
        [child setVisibilityWithInt:newVisibility];
      }
    }
  }
  mInLayout_ = false;
  mFirstLayout_ = false;
}

- (bool)isContentViewWithADView:(ADView *)child {
  return ((ADXDrawerLayout_LayoutParams *) nil_chk(((ADXDrawerLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ADXDrawerLayout_LayoutParams class]))))->gravity_ == ADGravity_NO_GRAVITY;
}

- (bool)isDrawerViewWithADView:(ADView *)child {
  int32_t gravity = ((ADXDrawerLayout_LayoutParams *) nil_chk(((ADXDrawerLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ADXDrawerLayout_LayoutParams class]))))->gravity_;
  int32_t absGravity = ADXGravityCompat_getAbsoluteGravityWithInt_withInt_(gravity, ADXViewCompat_getLayoutDirectionWithADView_(child));
  if ((absGravity & ADGravity_LEFT) != 0) {
    return true;
  }
  return (absGravity & ADGravity_RIGHT) != 0;
}

- (void)openDrawerWithADView:(ADView *)drawerView {
  [self openDrawerWithADView:drawerView withBoolean:true];
}

- (void)openDrawerWithADView:(ADView *)drawerView
                 withBoolean:(bool)animate {
  if (![self isDrawerViewWithADView:drawerView]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@$", @"View ", drawerView, @" is not a sliding drawer"));
  }
  ADXDrawerLayout_LayoutParams *lp = (ADXDrawerLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(drawerView)) getLayoutParams], [ADXDrawerLayout_LayoutParams class]);
  if (mFirstLayout_) {
    ((ADXDrawerLayout_LayoutParams *) nil_chk(lp))->onScreen_ = 1.f;
    lp->openState_ = ADXDrawerLayout_LayoutParams_FLAG_IS_OPENED;
    ADXDrawerLayout_updateChildrenImportantForAccessibilityWithADView_withBoolean_(self, drawerView, true);
    ADXDrawerLayout_updateChildAccessibilityActionWithADView_(self, drawerView);
  }
  else if (animate) {
    ((ADXDrawerLayout_LayoutParams *) nil_chk(lp))->openState_ |= ADXDrawerLayout_LayoutParams_FLAG_IS_OPENING;
    if ([self checkDrawerViewAbsoluteGravityWithADView:drawerView withInt:ADGravity_LEFT]) {
      [((ADXDrawerLayout_ViewDragHelper *) nil_chk(mLeftDragger_)) smoothSlideViewToWithADView:drawerView withInt:0 withInt:[drawerView getTop]];
    }
    else {
      [((ADXDrawerLayout_ViewDragHelper *) nil_chk(mRightDragger_)) smoothSlideViewToWithADView:drawerView withInt:[self getWidth] - [drawerView getWidth] withInt:[drawerView getTop]];
    }
  }
  else {
    [self moveDrawerToOffsetWithADView:drawerView withFloat:1.f];
    [self updateDrawerStateWithInt:ADXDrawerLayout_STATE_IDLE withADView:drawerView];
    [drawerView setVisibilityWithInt:ADView_VISIBLE];
  }
  [self invalidate];
}

- (void)openDrawerWithInt:(int32_t)gravity {
  [self openDrawerWithInt:gravity withBoolean:true];
}

- (void)openDrawerWithInt:(int32_t)gravity
              withBoolean:(bool)animate {
  ADView *drawerView = [self findDrawerWithGravityWithInt:gravity];
  if (drawerView == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"No drawer view found with gravity ", ADXDrawerLayout_gravityToStringWithInt_(gravity)));
  }
  [self openDrawerWithADView:drawerView withBoolean:animate];
}

- (void)closeDrawerWithADView:(ADView *)drawerView {
  [self closeDrawerWithADView:drawerView withBoolean:true];
}

- (void)closeDrawerWithADView:(ADView *)drawerView
                  withBoolean:(bool)animate {
  if (![self isDrawerViewWithADView:drawerView]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@$", @"View ", drawerView, @" is not a sliding drawer"));
  }
  ADXDrawerLayout_LayoutParams *lp = (ADXDrawerLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(drawerView)) getLayoutParams], [ADXDrawerLayout_LayoutParams class]);
  if (mFirstLayout_) {
    ((ADXDrawerLayout_LayoutParams *) nil_chk(lp))->onScreen_ = 0.f;
    lp->openState_ = 0;
  }
  else if (animate) {
    ((ADXDrawerLayout_LayoutParams *) nil_chk(lp))->openState_ |= ADXDrawerLayout_LayoutParams_FLAG_IS_CLOSING;
    if ([self checkDrawerViewAbsoluteGravityWithADView:drawerView withInt:ADGravity_LEFT]) {
      [((ADXDrawerLayout_ViewDragHelper *) nil_chk(mLeftDragger_)) smoothSlideViewToWithADView:drawerView withInt:-[drawerView getWidth] withInt:[drawerView getTop]];
    }
    else {
      [((ADXDrawerLayout_ViewDragHelper *) nil_chk(mRightDragger_)) smoothSlideViewToWithADView:drawerView withInt:[self getWidth] withInt:[drawerView getTop]];
    }
  }
  else {
    [self moveDrawerToOffsetWithADView:drawerView withFloat:0.f];
    [self updateDrawerStateWithInt:ADXDrawerLayout_STATE_IDLE withADView:drawerView];
    [drawerView setVisibilityWithInt:ADView_INVISIBLE];
  }
  [self invalidate];
}

- (void)closeDrawerWithInt:(int32_t)gravity {
  [self closeDrawerWithInt:gravity withBoolean:true];
}

- (void)closeDrawerWithInt:(int32_t)gravity
               withBoolean:(bool)animate {
  ADView *drawerView = [self findDrawerWithGravityWithInt:gravity];
  if (drawerView == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"No drawer view found with gravity ", ADXDrawerLayout_gravityToStringWithInt_(gravity)));
  }
  [self closeDrawerWithADView:drawerView withBoolean:animate];
}

- (bool)isDrawerOpenWithADView:(ADView *)drawer {
  if (![self isDrawerViewWithADView:drawer]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@$", @"View ", drawer, @" is not a drawer"));
  }
  ADXDrawerLayout_LayoutParams *drawerLp = (ADXDrawerLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(drawer)) getLayoutParams], [ADXDrawerLayout_LayoutParams class]);
  return (((ADXDrawerLayout_LayoutParams *) nil_chk(drawerLp))->openState_ & ADXDrawerLayout_LayoutParams_FLAG_IS_OPENED) == 1;
}

- (bool)isDrawerOpenWithInt:(int32_t)drawerGravity {
  ADView *drawerView = [self findDrawerWithGravityWithInt:drawerGravity];
  if (drawerView != nil) {
    return [self isDrawerOpenWithADView:drawerView];
  }
  return false;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXDrawerLayout_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)updateChildAccessibilityActionWithADView:(ADView *)drawerView {
  ADXDrawerLayout_updateChildAccessibilityActionWithADView_(self, drawerView);
}

- (void)updateChildrenImportantForAccessibilityWithADView:(ADView *)drawerView
                                              withBoolean:(bool)b {
  ADXDrawerLayout_updateChildrenImportantForAccessibilityWithADView_withBoolean_(self, drawerView, b);
}

- (void)smoothSlideViewToWithADView:(ADView *)drawerView
                            withInt:(int32_t)x
                            withInt:(int32_t)y {
}

- (void)updateDrawerViewStateWithInt:(int32_t)activeState
                          withADView:(ADView *)activeDrawer {
  [self updateDrawerStateWithInt:activeState withADView:activeDrawer];
}

- (void)moveDrawerViewToOffsetWithADView:(ADView *)drawerView
                               withFloat:(float)slideOffset {
  [self moveDrawerToOffsetWithADView:drawerView withFloat:slideOffset];
}

- (bool)isViewContentViewWithADView:(ADView *)view {
  return [self isContentViewWithADView:view];
}

- (bool)requiresToBeOnScreenWithADView:(ADView *)view {
  return ((ADXDrawerLayout_LayoutParams *) nil_chk((((ADXDrawerLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADXDrawerLayout_LayoutParams class])))))->onScreen_ == 1;
}

- (bool)isOpeningWithADView:(ADView *)drawerView {
  ADXDrawerLayout_LayoutParams *layoutParams = ((ADXDrawerLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(drawerView)) getLayoutParams], [ADXDrawerLayout_LayoutParams class]));
  int32_t openState = ((ADXDrawerLayout_LayoutParams *) nil_chk(layoutParams))->openState_;
  return (openState & ADXDrawerLayout_LayoutParams_FLAG_IS_OPENING) != 0;
}

- (void)onViewPositionChangedWithADView:(ADView *)changedView
                                withInt:(int32_t)left
                                withInt:(int32_t)top
                                withInt:(int32_t)dx
                                withInt:(int32_t)dy {
  float offset;
  int32_t childWidth = [((ADView *) nil_chk(changedView)) getWidth];
  if ([self checkDrawerViewAbsoluteGravityWithADView:changedView withInt:ADGravity_LEFT]) {
    offset = (float) (childWidth + left) / childWidth;
  }
  else {
    int32_t width = [self getWidth];
    offset = (float) (width - left) / childWidth;
  }
  [self setDrawerViewOffsetWithADView:changedView withFloat:offset];
}

- (void)setFlagStateOpenedWithADView:(ADView *)drawerView {
  ADXDrawerLayout_LayoutParams *lp = (ADXDrawerLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(drawerView)) getLayoutParams], [ADXDrawerLayout_LayoutParams class]);
  ((ADXDrawerLayout_LayoutParams *) nil_chk(lp))->openState_ = ADXDrawerLayout_LayoutParams_FLAG_IS_OPENED;
}

- (void)dealloc {
  RELEASE_(mLeftDragger_);
  RELEASE_(mRightDragger_);
  RELEASE_(mListener_);
  RELEASE_(mListeners_);
  RELEASE_(mLastInsets_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 8, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 10, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 11, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 12, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 15, 14, -1, -1, -1, -1 },
    { NULL, "F", 0x0, 16, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 17, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 20, 14, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x0, 21, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x8, 22, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 23, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 24, 25, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 26, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 27, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 30, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 32, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 32, 5, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 33, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 34, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 35, 36, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 37, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 38, 14, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 39, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 40, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 41, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 42, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 44, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(setDrawerListenerWithADXDrawerLayout_DrawerListener:);
  methods[1].selector = @selector(addDrawerListenerWithADXDrawerLayout_DrawerListener:);
  methods[2].selector = @selector(removeDrawerListenerWithADXDrawerLayout_DrawerListener:);
  methods[3].selector = @selector(setDrawerLockModeWithInt:);
  methods[4].selector = @selector(setDrawerLockModeWithInt:withInt:);
  methods[5].selector = @selector(setDrawerLockModeWithInt:withADView:);
  methods[6].selector = @selector(getDrawerLockModeWithInt:);
  methods[7].selector = @selector(getDrawerLockModeWithADView:);
  methods[8].selector = @selector(updateDrawerStateWithInt:withADView:);
  methods[9].selector = @selector(dispatchOnDrawerClosedWithADView:);
  methods[10].selector = @selector(dispatchOnDrawerOpenedWithADView:);
  methods[11].selector = @selector(dispatchOnDrawerSlideWithADView:withFloat:);
  methods[12].selector = @selector(setDrawerViewOffsetWithADView:withFloat:);
  methods[13].selector = @selector(getDrawerViewOffsetWithADView:);
  methods[14].selector = @selector(getDrawerViewAbsoluteGravityWithADView:);
  methods[15].selector = @selector(checkDrawerViewAbsoluteGravityWithADView:withInt:);
  methods[16].selector = @selector(moveDrawerToOffsetWithADView:withFloat:);
  methods[17].selector = @selector(findDrawerWithGravityWithInt:);
  methods[18].selector = @selector(gravityToStringWithInt:);
  methods[19].selector = @selector(onMeasureWithInt:withInt:);
  methods[20].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[21].selector = @selector(isContentViewWithADView:);
  methods[22].selector = @selector(isDrawerViewWithADView:);
  methods[23].selector = @selector(openDrawerWithADView:);
  methods[24].selector = @selector(openDrawerWithADView:withBoolean:);
  methods[25].selector = @selector(openDrawerWithInt:);
  methods[26].selector = @selector(openDrawerWithInt:withBoolean:);
  methods[27].selector = @selector(closeDrawerWithADView:);
  methods[28].selector = @selector(closeDrawerWithADView:withBoolean:);
  methods[29].selector = @selector(closeDrawerWithInt:);
  methods[30].selector = @selector(closeDrawerWithInt:withBoolean:);
  methods[31].selector = @selector(isDrawerOpenWithADView:);
  methods[32].selector = @selector(isDrawerOpenWithInt:);
  methods[33].selector = @selector(init);
  methods[34].selector = @selector(updateChildAccessibilityActionWithADView:);
  methods[35].selector = @selector(updateChildrenImportantForAccessibilityWithADView:withBoolean:);
  methods[36].selector = @selector(smoothSlideViewToWithADView:withInt:withInt:);
  methods[37].selector = @selector(updateDrawerViewStateWithInt:withADView:);
  methods[38].selector = @selector(moveDrawerViewToOffsetWithADView:withFloat:);
  methods[39].selector = @selector(isViewContentViewWithADView:);
  methods[40].selector = @selector(requiresToBeOnScreenWithADView:);
  methods[41].selector = @selector(isOpeningWithADView:);
  methods[42].selector = @selector(onViewPositionChangedWithADView:withInt:withInt:withInt:withInt:);
  methods[43].selector = @selector(setFlagStateOpenedWithADView:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 45, -1, -1 },
    { "STATE_IDLE", "I", .constantValue.asInt = ADXDrawerLayout_STATE_IDLE, 0x19, -1, -1, -1, -1 },
    { "STATE_DRAGGING", "I", .constantValue.asInt = ADXDrawerLayout_STATE_DRAGGING, 0x19, -1, -1, -1, -1 },
    { "STATE_SETTLING", "I", .constantValue.asInt = ADXDrawerLayout_STATE_SETTLING, 0x19, -1, -1, -1, -1 },
    { "LOCK_MODE_UNLOCKED", "I", .constantValue.asInt = ADXDrawerLayout_LOCK_MODE_UNLOCKED, 0x19, -1, -1, -1, -1 },
    { "LOCK_MODE_LOCKED_CLOSED", "I", .constantValue.asInt = ADXDrawerLayout_LOCK_MODE_LOCKED_CLOSED, 0x19, -1, -1, -1, -1 },
    { "LOCK_MODE_LOCKED_OPEN", "I", .constantValue.asInt = ADXDrawerLayout_LOCK_MODE_LOCKED_OPEN, 0x19, -1, -1, -1, -1 },
    { "LOCK_MODE_UNDEFINED", "I", .constantValue.asInt = ADXDrawerLayout_LOCK_MODE_UNDEFINED, 0x19, -1, -1, -1, -1 },
    { "MIN_DRAWER_MARGIN", "I", .constantValue.asInt = ADXDrawerLayout_MIN_DRAWER_MARGIN, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_SCRIM_COLOR", "I", .constantValue.asInt = ADXDrawerLayout_DEFAULT_SCRIM_COLOR, 0x1a, -1, -1, -1, -1 },
    { "PEEK_DELAY", "I", .constantValue.asInt = ADXDrawerLayout_PEEK_DELAY, 0x1a, -1, -1, -1, -1 },
    { "MIN_FLING_VELOCITY", "I", .constantValue.asInt = ADXDrawerLayout_MIN_FLING_VELOCITY, 0x1a, -1, -1, -1, -1 },
    { "ALLOW_EDGE_LOCK", "Z", .constantValue.asBOOL = ADXDrawerLayout_ALLOW_EDGE_LOCK, 0x1a, -1, -1, -1, -1 },
    { "CHILDREN_DISALLOW_INTERCEPT", "Z", .constantValue.asBOOL = ADXDrawerLayout_CHILDREN_DISALLOW_INTERCEPT, 0x1a, -1, -1, -1, -1 },
    { "TOUCH_SLOP_SENSITIVITY", "F", .constantValue.asFloat = ADXDrawerLayout_TOUCH_SLOP_SENSITIVITY, 0x1a, -1, -1, -1, -1 },
    { "CAN_HIDE_DESCENDANTS", "Z", .constantValue.asBOOL = ADXDrawerLayout_CAN_HIDE_DESCENDANTS, 0x18, -1, -1, -1, -1 },
    { "SET_DRAWER_SHADOW_FROM_ELEVATION", "Z", .constantValue.asBOOL = ADXDrawerLayout_SET_DRAWER_SHADOW_FROM_ELEVATION, 0x1a, -1, -1, -1, -1 },
    { "mDrawerElevation_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMinDrawerMargin_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mScrimColor_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mScrimOpacity_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLeftDragger_", "LADXDrawerLayout_ViewDragHelper;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mRightDragger_", "LADXDrawerLayout_ViewDragHelper;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mDrawerState_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mInLayout_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mFirstLayout_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLockModeLeft_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLockModeRight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLockModeStart_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLockModeEnd_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mChildrenCanceledTouch_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mListener_", "LADXDrawerLayout_DrawerListener;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mListeners_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 46, -1 },
    { "mInitialMotionX_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mInitialMotionY_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLastInsets_", "LADXDrawerLayout_WindowInsetsCompat;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mDrawStatusBarBackground_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sEdgeSizeUsingSystemGestureInsets", "Z", .constantValue.asBOOL = ADXDrawerLayout_sEdgeSizeUsingSystemGestureInsets, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setDrawerListener", "LADXDrawerLayout_DrawerListener;", "addDrawerListener", "removeDrawerListener", "setDrawerLockMode", "I", "II", "ILADView;", "getDrawerLockMode", "LADView;", "updateDrawerState", "dispatchOnDrawerClosed", "dispatchOnDrawerOpened", "dispatchOnDrawerSlide", "LADView;F", "setDrawerViewOffset", "getDrawerViewOffset", "getDrawerViewAbsoluteGravity", "checkDrawerViewAbsoluteGravity", "LADView;I", "moveDrawerToOffset", "findDrawerWithGravity", "gravityToString", "onMeasure", "onLayout", "ZIIII", "isContentView", "isDrawerView", "openDrawer", "LADView;Z", "IZ", "closeDrawer", "isDrawerOpen", "updateChildAccessibilityAction", "updateChildrenImportantForAccessibility", "smoothSlideViewTo", "LADView;II", "updateDrawerViewState", "moveDrawerViewToOffset", "isViewContentView", "requiresToBeOnScreen", "isOpening", "onViewPositionChanged", "LADView;IIII", "setFlagStateOpened", &ADXDrawerLayout_TAG, "Ljava/util/List<Landroidx/drawerlayout/widget/DrawerLayout$DrawerListener;>;", "LADXDrawerLayout_DrawerListener;LADXDrawerLayout_LayoutParams;LADXDrawerLayout_ViewDragHelper;LADXDrawerLayout_WindowInsetsCompat;" };
  static const J2ObjcClassInfo _ADXDrawerLayout = { "DrawerLayout", "androidx.drawerlayout.widget", ptrTable, methods, fields, 7, 0x1, 44, 38, -1, 47, -1, -1, -1 };
  return &_ADXDrawerLayout;
}

@end

NSString *ADXDrawerLayout_gravityToStringWithInt_(int32_t gravity) {
  ADXDrawerLayout_initialize();
  if ((gravity & ADGravity_LEFT) == ADGravity_LEFT) {
    return @"LEFT";
  }
  if ((gravity & ADGravity_RIGHT) == ADGravity_RIGHT) {
    return @"RIGHT";
  }
  return JavaLangInteger_toHexStringWithInt_(gravity);
}

void ADXDrawerLayout_init(ADXDrawerLayout *self) {
  ADViewGroup_init(self);
  self->mScrimColor_ = ADXDrawerLayout_DEFAULT_SCRIM_COLOR;
  self->mFirstLayout_ = true;
  self->mLockModeLeft_ = ADXDrawerLayout_LOCK_MODE_UNDEFINED;
  self->mLockModeRight_ = ADXDrawerLayout_LOCK_MODE_UNDEFINED;
  self->mLockModeStart_ = ADXDrawerLayout_LOCK_MODE_UNDEFINED;
  self->mLockModeEnd_ = ADXDrawerLayout_LOCK_MODE_UNDEFINED;
  float density = ((ADDisplayMetrics *) nil_chk([((ADResources *) nil_chk([self getResources])) getDisplayMetrics]))->density_;
  self->mMinDrawerMargin_ = JreFpToInt((ADXDrawerLayout_MIN_DRAWER_MARGIN * density + 0.5f));
  JreStrongAssignAndConsume(&self->mLeftDragger_, new_ADXDrawerLayout_ViewDragHelper_initWithADXDrawerLayout_withADContext_(self, [self getContext]));
  JreStrongAssignAndConsume(&self->mRightDragger_, new_ADXDrawerLayout_ViewDragHelper_initWithADXDrawerLayout_withADContext_(self, [self getContext]));
}

ADXDrawerLayout *new_ADXDrawerLayout_init() {
  J2OBJC_NEW_IMPL(ADXDrawerLayout, init)
}

ADXDrawerLayout *create_ADXDrawerLayout_init() {
  J2OBJC_CREATE_IMPL(ADXDrawerLayout, init)
}

void ADXDrawerLayout_updateChildAccessibilityActionWithADView_(ADXDrawerLayout *self, ADView *drawerView) {
}

void ADXDrawerLayout_updateChildrenImportantForAccessibilityWithADView_withBoolean_(ADXDrawerLayout *self, ADView *drawerView, bool b) {
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXDrawerLayout)

J2OBJC_NAME_MAPPING(ADXDrawerLayout, "androidx.drawerlayout.widget", "ADX")

@implementation ADXDrawerLayout_DrawerListener

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 4, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(onDrawerSlideWithADView:withFloat:);
  methods[1].selector = @selector(onDrawerOpenedWithADView:);
  methods[2].selector = @selector(onDrawerClosedWithADView:);
  methods[3].selector = @selector(onDrawerStateChangedWithInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onDrawerSlide", "LADView;F", "onDrawerOpened", "LADView;", "onDrawerClosed", "onDrawerStateChanged", "I", "LADXDrawerLayout;" };
  static const J2ObjcClassInfo _ADXDrawerLayout_DrawerListener = { "DrawerListener", "androidx.drawerlayout.widget", ptrTable, methods, NULL, 7, 0x609, 4, 0, 7, -1, -1, -1, -1 };
  return &_ADXDrawerLayout_DrawerListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ADXDrawerLayout_DrawerListener)

@implementation ADXDrawerLayout_LayoutParams

- (instancetype)initWithInt:(int32_t)width
                    withInt:(int32_t)height {
  ADXDrawerLayout_LayoutParams_initWithInt_withInt_(self, width, height);
  return self;
}

- (instancetype)initWithInt:(int32_t)width
                    withInt:(int32_t)height
                    withInt:(int32_t)gravity {
  ADXDrawerLayout_LayoutParams_initWithInt_withInt_withInt_(self, width, height, gravity);
  return self;
}

- (instancetype)initWithADXDrawerLayout_LayoutParams:(ADXDrawerLayout_LayoutParams *)source {
  ADXDrawerLayout_LayoutParams_initWithADXDrawerLayout_LayoutParams_(self, source);
  return self;
}

- (instancetype)initWithADViewGroup_LayoutParams:(ADViewGroup_LayoutParams *)source {
  ADXDrawerLayout_LayoutParams_initWithADViewGroup_LayoutParams_(self, source);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:);
  methods[1].selector = @selector(initWithInt:withInt:withInt:);
  methods[2].selector = @selector(initWithADXDrawerLayout_LayoutParams:);
  methods[3].selector = @selector(initWithADViewGroup_LayoutParams:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "FLAG_IS_OPENED", "I", .constantValue.asInt = ADXDrawerLayout_LayoutParams_FLAG_IS_OPENED, 0x1a, -1, -1, -1, -1 },
    { "FLAG_IS_OPENING", "I", .constantValue.asInt = ADXDrawerLayout_LayoutParams_FLAG_IS_OPENING, 0x1a, -1, -1, -1, -1 },
    { "FLAG_IS_CLOSING", "I", .constantValue.asInt = ADXDrawerLayout_LayoutParams_FLAG_IS_CLOSING, 0x1a, -1, -1, -1, -1 },
    { "gravity_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "onScreen_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "isPeeking_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "openState_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II", "III", "LADXDrawerLayout_LayoutParams;", "LADViewGroup_LayoutParams;", "LADXDrawerLayout;" };
  static const J2ObjcClassInfo _ADXDrawerLayout_LayoutParams = { "LayoutParams", "androidx.drawerlayout.widget", ptrTable, methods, fields, 7, 0x9, 4, 7, 4, -1, -1, -1, -1 };
  return &_ADXDrawerLayout_LayoutParams;
}

@end

void ADXDrawerLayout_LayoutParams_initWithInt_withInt_(ADXDrawerLayout_LayoutParams *self, int32_t width, int32_t height) {
  ADViewGroup_MarginLayoutParams_initWithInt_withInt_(self, width, height);
  self->gravity_ = ADGravity_NO_GRAVITY;
}

ADXDrawerLayout_LayoutParams *new_ADXDrawerLayout_LayoutParams_initWithInt_withInt_(int32_t width, int32_t height) {
  J2OBJC_NEW_IMPL(ADXDrawerLayout_LayoutParams, initWithInt_withInt_, width, height)
}

ADXDrawerLayout_LayoutParams *create_ADXDrawerLayout_LayoutParams_initWithInt_withInt_(int32_t width, int32_t height) {
  J2OBJC_CREATE_IMPL(ADXDrawerLayout_LayoutParams, initWithInt_withInt_, width, height)
}

void ADXDrawerLayout_LayoutParams_initWithInt_withInt_withInt_(ADXDrawerLayout_LayoutParams *self, int32_t width, int32_t height, int32_t gravity) {
  ADXDrawerLayout_LayoutParams_initWithInt_withInt_(self, width, height);
  self->gravity_ = gravity;
}

ADXDrawerLayout_LayoutParams *new_ADXDrawerLayout_LayoutParams_initWithInt_withInt_withInt_(int32_t width, int32_t height, int32_t gravity) {
  J2OBJC_NEW_IMPL(ADXDrawerLayout_LayoutParams, initWithInt_withInt_withInt_, width, height, gravity)
}

ADXDrawerLayout_LayoutParams *create_ADXDrawerLayout_LayoutParams_initWithInt_withInt_withInt_(int32_t width, int32_t height, int32_t gravity) {
  J2OBJC_CREATE_IMPL(ADXDrawerLayout_LayoutParams, initWithInt_withInt_withInt_, width, height, gravity)
}

void ADXDrawerLayout_LayoutParams_initWithADXDrawerLayout_LayoutParams_(ADXDrawerLayout_LayoutParams *self, ADXDrawerLayout_LayoutParams *source) {
  ADViewGroup_MarginLayoutParams_initWithADViewGroup_MarginLayoutParams_(self, source);
  self->gravity_ = ADGravity_NO_GRAVITY;
  self->gravity_ = ((ADXDrawerLayout_LayoutParams *) nil_chk(source))->gravity_;
}

ADXDrawerLayout_LayoutParams *new_ADXDrawerLayout_LayoutParams_initWithADXDrawerLayout_LayoutParams_(ADXDrawerLayout_LayoutParams *source) {
  J2OBJC_NEW_IMPL(ADXDrawerLayout_LayoutParams, initWithADXDrawerLayout_LayoutParams_, source)
}

ADXDrawerLayout_LayoutParams *create_ADXDrawerLayout_LayoutParams_initWithADXDrawerLayout_LayoutParams_(ADXDrawerLayout_LayoutParams *source) {
  J2OBJC_CREATE_IMPL(ADXDrawerLayout_LayoutParams, initWithADXDrawerLayout_LayoutParams_, source)
}

void ADXDrawerLayout_LayoutParams_initWithADViewGroup_LayoutParams_(ADXDrawerLayout_LayoutParams *self, ADViewGroup_LayoutParams *source) {
  ADViewGroup_MarginLayoutParams_initWithADViewGroup_LayoutParams_(self, source);
  self->gravity_ = ADGravity_NO_GRAVITY;
}

ADXDrawerLayout_LayoutParams *new_ADXDrawerLayout_LayoutParams_initWithADViewGroup_LayoutParams_(ADViewGroup_LayoutParams *source) {
  J2OBJC_NEW_IMPL(ADXDrawerLayout_LayoutParams, initWithADViewGroup_LayoutParams_, source)
}

ADXDrawerLayout_LayoutParams *create_ADXDrawerLayout_LayoutParams_initWithADViewGroup_LayoutParams_(ADViewGroup_LayoutParams *source) {
  J2OBJC_CREATE_IMPL(ADXDrawerLayout_LayoutParams, initWithADViewGroup_LayoutParams_, source)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXDrawerLayout_LayoutParams)

@implementation ADXDrawerLayout_ViewDragHelper

- (int32_t)getViewDragState {
  return mDragState_;
}

- (void)cancel {
}

- (instancetype)initWithADXDrawerLayout:(ADXDrawerLayout *)outer$
                          withADContext:(ADContext *)context {
  ADXDrawerLayout_ViewDragHelper_initWithADXDrawerLayout_withADContext_(self, outer$, context);
  return self;
}

- (int32_t)getDefaultEdgeSize {
  return mDefaultEdgeSize_;
}

- (void)setEdgeSizeWithInt:(int32_t)size {
  mEdgeSize_ = size;
}

- (void)smoothSlideViewToWithADView:(ADView *)drawerView
                            withInt:(int32_t)x
                            withInt:(int32_t)y {
  [this$0_ smoothSlideViewToWithADView:drawerView withInt:x withInt:y];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getViewDragState);
  methods[1].selector = @selector(cancel);
  methods[2].selector = @selector(initWithADXDrawerLayout:withADContext:);
  methods[3].selector = @selector(getDefaultEdgeSize);
  methods[4].selector = @selector(setEdgeSizeWithInt:);
  methods[5].selector = @selector(smoothSlideViewToWithADView:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LADXDrawerLayout;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "STATE_IDLE", "I", .constantValue.asInt = ADXDrawerLayout_ViewDragHelper_STATE_IDLE, 0x19, -1, -1, -1, -1 },
    { "STATE_DRAGGING", "I", .constantValue.asInt = ADXDrawerLayout_ViewDragHelper_STATE_DRAGGING, 0x19, -1, -1, -1, -1 },
    { "STATE_SETTLING", "I", .constantValue.asInt = ADXDrawerLayout_ViewDragHelper_STATE_SETTLING, 0x19, -1, -1, -1, -1 },
    { "EDGE_SIZE", "I", .constantValue.asInt = ADXDrawerLayout_ViewDragHelper_EDGE_SIZE, 0x1a, -1, -1, -1, -1 },
    { "mDragState_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mEdgeSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mDefaultEdgeSize_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADXDrawerLayout;LADContext;", "setEdgeSize", "I", "smoothSlideViewTo", "LADView;II", "LADXDrawerLayout;" };
  static const J2ObjcClassInfo _ADXDrawerLayout_ViewDragHelper = { "ViewDragHelper", "androidx.drawerlayout.widget", ptrTable, methods, fields, 7, 0x0, 6, 8, 5, -1, -1, -1, -1 };
  return &_ADXDrawerLayout_ViewDragHelper;
}

@end

void ADXDrawerLayout_ViewDragHelper_initWithADXDrawerLayout_withADContext_(ADXDrawerLayout_ViewDragHelper *self, ADXDrawerLayout *outer$, ADContext *context) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  float density = ((ADDisplayMetrics *) nil_chk([((ADResources *) nil_chk([((ADContext *) nil_chk(context)) getResources])) getDisplayMetrics]))->density_;
  self->mDefaultEdgeSize_ = JreFpToInt((ADXDrawerLayout_ViewDragHelper_EDGE_SIZE * density + 0.5f));
}

ADXDrawerLayout_ViewDragHelper *new_ADXDrawerLayout_ViewDragHelper_initWithADXDrawerLayout_withADContext_(ADXDrawerLayout *outer$, ADContext *context) {
  J2OBJC_NEW_IMPL(ADXDrawerLayout_ViewDragHelper, initWithADXDrawerLayout_withADContext_, outer$, context)
}

ADXDrawerLayout_ViewDragHelper *create_ADXDrawerLayout_ViewDragHelper_initWithADXDrawerLayout_withADContext_(ADXDrawerLayout *outer$, ADContext *context) {
  J2OBJC_CREATE_IMPL(ADXDrawerLayout_ViewDragHelper, initWithADXDrawerLayout_withADContext_, outer$, context)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXDrawerLayout_ViewDragHelper)

@implementation ADXDrawerLayout_WindowInsetsCompat

- (instancetype)initWithADXDrawerLayout:(ADXDrawerLayout *)outer$ {
  ADXDrawerLayout_WindowInsetsCompat_initWithADXDrawerLayout_(self, outer$);
  return self;
}

- (int32_t)getSystemWindowInsetLeft {
  return 0;
}

- (ADXDrawerLayout_WindowInsetsCompat *)replaceSystemWindowInsetsWithInt:(int32_t)systemWindowInsetLeft
                                                                 withInt:(int32_t)systemWindowInsetTop
                                                                 withInt:(int32_t)systemWindowInsetRight
                                                                 withInt:(int32_t)systemWindowInsetBottom {
  return nil;
}

- (int32_t)getSystemWindowInsetBottom {
  return 0;
}

- (int32_t)getSystemWindowInsetRight {
  return 0;
}

- (int32_t)getSystemWindowInsetTop {
  return 0;
}

- (ADInsets *)getSystemGestureInsets {
  return nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXDrawerLayout_WindowInsetsCompat;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADInsets;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADXDrawerLayout:);
  methods[1].selector = @selector(getSystemWindowInsetLeft);
  methods[2].selector = @selector(replaceSystemWindowInsetsWithInt:withInt:withInt:withInt:);
  methods[3].selector = @selector(getSystemWindowInsetBottom);
  methods[4].selector = @selector(getSystemWindowInsetRight);
  methods[5].selector = @selector(getSystemWindowInsetTop);
  methods[6].selector = @selector(getSystemGestureInsets);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LADXDrawerLayout;", "replaceSystemWindowInsets", "IIII" };
  static const J2ObjcClassInfo _ADXDrawerLayout_WindowInsetsCompat = { "WindowInsetsCompat", "androidx.drawerlayout.widget", ptrTable, methods, NULL, 7, 0x0, 7, 0, 0, -1, -1, -1, -1 };
  return &_ADXDrawerLayout_WindowInsetsCompat;
}

@end

void ADXDrawerLayout_WindowInsetsCompat_initWithADXDrawerLayout_(ADXDrawerLayout_WindowInsetsCompat *self, ADXDrawerLayout *outer$) {
  NSObject_init(self);
}

ADXDrawerLayout_WindowInsetsCompat *new_ADXDrawerLayout_WindowInsetsCompat_initWithADXDrawerLayout_(ADXDrawerLayout *outer$) {
  J2OBJC_NEW_IMPL(ADXDrawerLayout_WindowInsetsCompat, initWithADXDrawerLayout_, outer$)
}

ADXDrawerLayout_WindowInsetsCompat *create_ADXDrawerLayout_WindowInsetsCompat_initWithADXDrawerLayout_(ADXDrawerLayout *outer$) {
  J2OBJC_CREATE_IMPL(ADXDrawerLayout_WindowInsetsCompat, initWithADXDrawerLayout_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXDrawerLayout_WindowInsetsCompat)
